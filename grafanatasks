



# vi /opt/IBM/zimon/ZIMonSensors.cfg

  # Interface over which incoming queries are accepted (default: 127.0.0.1 to
  # prevent queries from remote machines).
  queryinterface = "0.0.0.0"

# systemctl restart pmcollector


On a host running docker/podman perform the following steps:
    Clone this repository using git in your favourite directory


# git clone https://github.com/IBM/ibm-spectrum-scale-bridge-for-grafana.git grafana_bridge

curl -s https://github.com/IBM/ibm-spectrum-scale-bridge-for-grafana/archive/refs/tags/v7.0.4.zip grafana_bridge
wget https://github.com/IBM/ibm-spectrum-scale-bridge-for-grafana/archive/refs/tags/v7.0.4.tar.gz

chmod 755 v7.0.4.tar.gz
tar -xvf v7.0.4.tar.gz
ibm-spectrum-scale-bridge-for-grafana-7.0.4
/root/ibm-spectrum-scale-bridge-for-grafana-7.0.4


Copy the 'mmsdrfs' file from your IBM Spectrum Scale cluster to the 'grafana_bridge/source/gpfsConfig' directory cp grafana_bridge/source/gpfsConfig

# scp <my_gpfs_cluster_node>:/var/mmfs/gen/mmsdrfs grafana_bridge/source/gpfsConfig
scp lab-scale1:/var/mmfs/gen/mmsdrfs /root/ibm-spectrum-scale-bridge-for-grafana-7.0.4/source/gpfsConfig



Create the bridge container image
# cd grafana_bridge
# podman build -t bridge_image:latest .
podman build -t  bridge_image:latest .


Starting with IBM Spectrum Scale version 5.1.1 any client querying the performance data from the IBM Spectrum Scale cluster needs the API key authentication. To create API key for the grafana-bridge application complete the following steps:

Add the 'scale_grafana' API key to your IBM Spectrum Scale performance monitoring configuration using 'mmperfmon config' command:

# mmperfmon config add --apiKey scale_grafana
API key file _perfmon.keys successfully uploaded to CCR

    Show the generated key by invoking 'mmperfmon config show --apiKey scale_grafana'.

# mmperfmon config show --apiKey scale_grafana
{
    "key": "e6884dae-30ec-44c7-8887-e7c19d9adf03",
    "comment": "user comment"
}

API key file _perfmon.keys successfully uploaded to CCR



Start the bridge running in a container:
# podman run -dt -p 4242:4242 -e "SERVER=lab-scale1" -e "APIKEYVALUE=e6884dae-30ec-44c7-8887-e7c19d9adf03" --pod new:grafana_bridge_pod --name grafana_bridge bridge_image:latest
# podman logs grafana_bridge


podman stop grafana_bridge
podman rm grafana_bridge
podman pod rm grafana_bridge_pod



Generate SSL certificates
To set up SSL communication between the bridge and the Grafana complete the following steps:

On the host, where you are running the bridge, generate a private key. For example, you can use openssl command and follow the OpenSSL ‘howto’ instructions:

mkdir -p /etc/bridge_ssl/certs/

# openssl genrsa -out /etc/bridge_ssl/certs/privkey.pem 2048

    Generate a certificate.

# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/bridge_ssl/certs/privkey.pem -out /etc/bridge_ssl/certs/cert.pem

Openssl will then ask you a series of questions. You can enter whatever values are applicable, or leave most fields blank. The one field you must fill in is the ‘Common Name’: enter the hostname which will be used to access the bridge (where the Grafana server running).
Note: The file names for the key and the certificate should be ‘privkey.pem’ and ‘cert.pem’.

Start the bridge listening on the socket port 8443

Don't forget to provide the location and the file name of the tls private key and the tls certificate:

# python3 zimonGrafanaIntf.py -p 8443 -t /etc/bridge_ssl/certs -k privkey.pem -m cert.pem



podman run -dt -p 8443:8443 -e "SERVER=lab-scale1" -e "APIKEYVALUE=e6884dae-30ec-44c7-8887-e7c19d9adf03" -e "PORT=8443" -e "PROTOCOL=https" -e "TLSKEYPATH=/etc/bridge_ssl/certs" -e "TLSKEYFILE=privkey.pem" -e "TLSCERTFILE=cert.pem" -v /tmp:/var/log/ibm_bridge_for_grafana -v /etc/bridge_ssl/certs:/etc/bridge_ssl/certs --pod new:grafana-bridge-ssl-pod --name grafana-bridge-ssl bridge_image:latest
podman run -dt -p 8443:8443 -e "SERVER=lab-scale1" -e "APIKEYVALUE=/etc/bridge_ssl/certs/apikey_lab_scale1" -e "PORT=8443" -e "PROTOCOL=https" -e "TLSKEYPATH=/etc/bridge_ssl/certs" -e "TLSKEYFILE=privkey.pem" -e "TLSCERTFILE=cert.pem" -v /tmp:/var/log/ibm_bridge_for_grafana -v /etc/bridge_ssl/certs:/etc/bridge_ssl/certs --pod new:grafana-bridge-ssl-pod --name grafana-bridge-ssl bridge_image:latest

# podman logs grafana-bridge-ssl

podman stop grafana-bridge-ssl
podman rm grafana-bridge-ssl
podman pod rm grafana-bridge-ssl-pod


APIKEY in file
podman run -dt -p 8443:8443 -e "SERVER=lab-scale1" -e "APIKEYVALUE=/etc/bridge_ssl/certs/apikey_lab_scale1" -e "PORT=8443" -e "PROTOCOL=https" -e "TLSKEYPATH=/etc/bridge_ssl/certs" -e "TLSKEYFILE=privkey.pem" -e "TLSCERTFILE=cert.pem" -v /tmp:/var/log/ibm_bridge_for_grafana -v /etc/bridge_ssl/certs:/etc/bridge_ssl/certs --pod new:grafana-bridge-ssl-pod --name grafana-bridge-ssl bridge_image:latest

podman run --name grafana-bridge-test --detach=True --log-level debug --env PROTOCOL=https --env APIKEYVALUE=/etc/bridge_ssl/certs/apikey_lab_scale3 --env TLSKEYPATH=/etc/bridge_ssl/certs/ --env TLSKEYFILE=privkey.pem --env TLSCERTFILE=cert.pem --expose 8445 --publish 8445:8445 --volume /tmp:/var/log/ibm_bridge_for_grafana --volume /etc/bridge_ssl/certs:/etc/bridge_ssl/certs

podman run --name grafana-bridge-test --detach=True --log-level debug --env PROTOCOL=https --env APIKEYVALUE=/etc/bridge_ssl/certs/apikey_lab_scale3 --env TLSKEYPATH=/etc/bridge_ssl/certs/ --env TLSKEYFILE=privkey.pem --env TLSCERTFILE=cert.pem --expose 8445 --publish 8445:8445 --volume /tmp:/var/log/ibm_bridge_for_grafana --volume /etc/bridge_ssl/certs:/etc/bridge_ssl/certs



podman run --name scale-grafana-test --log-level debug --env PROTOCOL=https --env SERVER=lab-scale1 --env APIKEYVALUE=5f19d535-4940-4192-a40d-3bb65cd14bd6 --env TLSKEYPATH=/etc/bridge_ssl/certs --env TLSKEYFILE=privkey.pem --env TLSCERTFILE=cert.pem --env PORT=8444 --expose 8444 --publish 8444:8444 --volume /var/log/ibm_bridge_for_grafana:/var/log/ibm_bridge_for_grafana --volume /etc/bridge_ssl/certs:/etc/bridge_ssl/certs --volume /etc/bridge_ssl/apikey:/etc/bridge_ssl/apikey localhost/lab-scale-storage-test-grafana-bridge-image

podman run --name scale-grafana-test --log-level debug --env PROTOCOL=https --env SERVER=lab-scale1 --env APIKEYVALUE=e6884dae-30ec-44c7-8887-e7c19d9adf03 --env TLSKEYPATH=/etc/bridge_ssl/certs --env TLSKEYFILE=privkey.pem --env TLSCERTFILE=cert.pem --env PORT=8444 --expose 8444 --publish 8444:8444 --volume /var/log/ibm_bridge_for_grafana:/var/log/ibm_bridge_for_grafana --volume /etc/bridge_ssl/certs:/etc/bridge_ssl/certs localhost/lab-scale-storage-test-grafana-bridge-image




Issues:

podman run -dt -p 4242:4242 -e "SERVER=9.XXX.XXX.XXX" -e "APIKEYVALUE=XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX" --pod new:my-pod --name grafana_bridge bridge_image:latest

podman run -dt -p 4242:4242 -e "SERVER=10.33.3.107" -e "APIKEYVALUE=89e21ff0-27fe-4b3e-aad9-cca80f85be4d" --pod new:grafana_bridge_pod --name grafana_bridge localhost/scale-test-os-grafana-bridge-image

sh -c python3 zimonGrafanaIntf.py -c 10 -s $SERVER -r $PROTOCOL -p $PORT -P $SERVERPORT -t $TLSKEYPATH --tlsKeyFile $TLSKEYFILE --tlsCertFile $TLSCERTFILE --apiKeyName $APIKEYNAME --apiKeyValue $APIKEYVALUE]


12697069|images
eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiI3OTdhNDc0Zjk2MzE0YjZjYjc3OTM0MWQ1OTAzMjVkMyJ9.hr7-rCfoOhAggYts6nJdIgfvTU0YRR9Zs1iIGV1W2CAbThDDG_DaC87cppR36A7DOhfRd6xndIm9Q7wb7NVz3KdPIqxI7KHMqI28Kmgi3fNr3xdcMPKXxDRGrmhweg9kKyY3PxeiGzls9CR9S6tvyDXaTIsdRMNhKKYWdPA9mOsQ-b8jE6a65fvc5cTbc_Ud42XvDdB4XcGzbrXR35v5RjdCp5PEqARpTC8V8FBc5Hr78jfKFQ0lZGzb-uLD92D20_rGvUT9xtX55bZNMFySFY-rGzC83fI6CwhwH-9ujzRrVFMW-lNppGwvyrZPrOt3D4z7cEpYz5QTENADJEAC8PyjYwcE5xgStiZqiAiI1slD8u3F-EfMnFF-pLHe5SXSOzeEYTL6oeZf9g8qWlwhTKCQFfMzIidBaa4QAAacp2FP__3pF0vJhDe_fMG5E2k4ZHezkyJ0rTsKsn-ep3IztSJUWb9YDe3sZ78h7KtjF6V5QctXNfKVGYzoa0XEqFjxSlFWuxJjlXyy_VPEg0lrVeB_xdC94mjJek2V3H2tR4zhB2ITKYO7cRi2e78kbJ61gtzMGS9JQjX0piu0i3LCZArChyzLQflj6Sxle0gt8QT0ddX_SM1qvFRvGSBNGALsgUrB1lKrChSEUpfa-BV012sbNEz85ggtOylGPFjfUzI

podman run -d --name grafana-test -p 3000:3000 -v grafana-data:/var/lib/grafana registry.redhat.io/rhel8/grafana


podman exec -it grafana-bridge-ssl /bin/bash

podman exec -it grafana-test /bin/bash


ansible-galaxy collection install -r roles/grafana_install/requirements.yml

-----------
 podman run --name grafana-bridge-test --detach=True --log-level debug --env PROTOCOL=https --env APIKEYVALUE=/etc/bridge_ssl/certs/apikey_lab_scale1 --env TLSKEYPATH=/etc/bridge_ssl/certs --env TLSKEYFILE=privkey.pem --env TLSCERTFILE=cert.pem --expose 8445 --publish 8445:8445 --volume /tmp:/var/log/ibm_bridge_for_grafana --volume /etc/bridge_ssl/certs:/etc/bridge_ssl/certs lab-scale-storage-test-grafana-bridge-image"




Dashboard management is a mess in grafana. The best way I found insofar is to use 'provisioned dashboards' (a special config for grafana to pick up dashboards from filesystem).

Check out cloudalchemy.grafana role (tasks/dashboards.yml) to see how they do it.



            "user": null,
            "userns": null,
            "uts": null,
            "volume": [
                "/tmp:/var/log/ibm_bridge_for_grafana",
                "/etc/bridge_ssl/certs:/etc/bridge_ssl/certs"
            ],
            "volumes": [
                "/tmp:/var/log/ibm_bridge_for_grafana",
                "/etc/bridge_ssl/certs:/etc/bridge_ssl/certs"
            ],




Info about podman as service https://github.com/open-zaak/ansible-collection/blob/c59cedfb471dceac4580d22884aa1998de664cea/roles/open_notificaties_podman/tasks/containers.yml



#### Classic Bridge

root@ems1# adduser grafanabridge

root@ems1# su - grafanabridge
Under this account I downloaded Python-3.8.3.tgz, CherryPy-18.6.0-py2.py3-none-any.whl and the ibm-spectrum-scale-bridge-for-grafana git repo from github.

Built and installed python as user grafanabridge:
grafanabridge@ems1% tar xvf Python-3.8.3.tgz
grafanabridge@ems1% cd Python-3.8.3
grafanabridge@ems1% ./configure --prefix=/home/grafanabridge/python-3.8.3
grafanabridge@ems1% make -j
grafanabridge@ems1% make install

Configured PATH to include this python, and installed Cherrypy wheel:
grafanabridge@ems1% export PATH=/home/grafanabridge/python-3.8.3/bin/:$PATH
grafanabridge@ems1% pip3 install CherryPy --user

Then started the bridge from the spectrum-scale-bridge-for-grafana repo folder:
grafanabridge@ems1% cd spectrum-scale-bridge-for-grafana
grafanabridge@ems1% python3.8 zimonGrafanaIntf.py

Initial cherryPy server engine start have been invoked. Python version: 3.8.3 (default, Jun 18 2020, 10:11:09)
[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)], cherryPy version: 18.6.0.
server started


ibm-spectrum-scale-bridge-for-grafana
[grafanabridge@scale-test-os-1 ~]$ cd ibm-spectrum-scale-bridge-for-grafana/source/
[grafanabridge@scale-test-os-1 source]$ pip3 install CherryPy^C
[grafanabridge@scale-test-os-1 source]$ python zimonGrafanaIntf.py
Missing mandatory parameters, quitting
[grafanabridge@scale-test-os-1 source]$ python zimonGrafanaIntf.py --apiKeyValue a22bc13f-0419-488b-bdf9-5c44023cd966
Traceback (most recent call last):
  File "zimonGrafanaIntf.py", line 702, in <module>
    main(sys.argv[1:])
  File "zimonGrafanaIntf.py", line 601, in main
    logger = configureLogging(args.get('logPath'), args.get('logFile', None), args.get('logLevel'))
  File "/home/grafanabridge/ibm-spectrum-scale-bridge-for-grafana/source/bridgeLogger.py", line 73, in configureLogging
    os.makedirs(logPath)
  File "/usr/lib64/python3.6/os.py", line 220, in makedirs
    mkdir(name, mode)
PermissionError: [Errno 13] Permission d
